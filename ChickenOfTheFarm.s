;
; File generated by cc65 v 2.16 - Git de1f805
;
	.fopt		compiler,"cc65 v 2.16 - Git de1f805"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_sprites
	.import		_pMusicInit
	.import		_UnRLE
	.export		_Level0Bottom
	.export		_Level1Top
	.export		_Level1Bottom
	.export		_Level2Top
	.export		_Level2Bottom
	.export		_collision
	.export		_frog
	.export		_bird
	.export		_pattern
	.export		_vblank
	.export		_vblank_counter
	.export		_ppuinit
	.export		_ppudisable
	.export		_apuinit
	.export		_set_scroll
	.export		_palattes
	.export		_fade_out
	.export		_fade_in
	.export		_patterntables
	.export		_draw_health
	.export		_setup_sprites
	.export		_dma_sprites
	.export		_input_poll
	.export		_small_jump
	.export		_big_jump
	.export		_update_sprites
	.export		_load_stage
	.export		_do_physics
	.export		_main

.segment	"DATA"

.segment	"RODATA"
_collision:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_frog:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
_bird:
	.byte	$04
	.byte	$05
.segment	"DATA"
.segment	"CHARS"
_pattern:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$08
	.byte	$60
	.byte	$D0
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$3E
	.byte	$F3
	.byte	$7C
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$50
	.byte	$78
	.byte	$C0
	.byte	$0C
	.byte	$80
	.byte	$2F
	.byte	$59
	.byte	$7E
	.byte	$F6
	.byte	$EC
	.byte	$9C
	.byte	$38
	.byte	$3F
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$E6
	.byte	$7C
	.byte	$1E
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$2C
	.byte	$F9
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E6
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$FE
	.byte	$FF
	.byte	$DF
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$0E
	.byte	$19
	.byte	$04
	.byte	$70
	.byte	$00
	.byte	$61
	.byte	$86
	.byte	$22
	.byte	$47
	.byte	$19
	.byte	$07
	.byte	$79
	.byte	$1D
	.byte	$66
	.byte	$B1
	.byte	$29
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$21
	.byte	$03
	.byte	$06
	.byte	$1E
	.byte	$18
	.byte	$18
	.byte	$7E
	.byte	$7E
	.byte	$FE
	.byte	$FC
	.byte	$78
	.byte	$60
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$78
	.byte	$40
	.byte	$5F
	.byte	$1F
	.byte	$3F
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$FF
	.byte	$0F
	.byte	$EF
	.byte	$E3
	.byte	$8F
	.byte	$3F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$F0
	.byte	$10
	.byte	$1C
	.byte	$70
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$7E
	.byte	$61
	.byte	$3C
	.byte	$1E
	.byte	$43
	.byte	$3F
	.byte	$1E
	.byte	$3C
	.byte	$42
	.byte	$40
	.byte	$3C
	.byte	$02
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$FE
	.byte	$3F
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$08
	.byte	$FE
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$18
	.byte	$2C
	.byte	$52
	.byte	$63
	.byte	$7F
	.byte	$7F
	.byte	$63
	.byte	$21
	.byte	$18
	.byte	$24
	.byte	$42
	.byte	$42
	.byte	$7E
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$7C
	.byte	$7E
	.byte	$63
	.byte	$7D
	.byte	$6E
	.byte	$64
	.byte	$62
	.byte	$21
	.byte	$7C
	.byte	$42
	.byte	$42
	.byte	$7C
	.byte	$48
	.byte	$44
	.byte	$42
	.byte	$00
	.res	32,$00

.segment	"RODATA"

_Level0Bottom:
	.byte	$01
	.byte	$0B
	.byte	$01
	.byte	$FF
	.byte	$0B
	.byte	$01
	.byte	$ED
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$0D
	.byte	$0B
	.byte	$01
	.byte	$FF
	.byte	$0B
	.byte	$01
	.byte	$CB
	.byte	$01
	.byte	$00
_Level1Top:
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$1B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$1B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$17
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_Level1Bottom:
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$17
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_Level2Top:
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$1B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$1B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$17
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$13
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_Level2Bottom:
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0B
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0F
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$15
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"OAM"
_sprites:
	.res	256,$00
.segment	"BSS"
_gController1:
	.res	1,$00
_gPrevController1:
	.res	1,$00
_gPrevController1Change:
	.res	1,$00
_gX:
	.res	1,$00
_gY:
	.res	1,$00
_gXScroll:
	.res	4,$00
_gYScroll:
	.res	1,$00
_gYNametable:
	.res	1,$00
_devnull:
	.res	1,$00
_i:
	.res	2,$00
_gJumping:
	.res	2,$00
_gBounceCounter:
	.res	2,$00
_gVelocity:
	.res	2,$00
_gVelocityDirection:
	.res	2,$00
_gSpeed:
	.res	2,$00
_gSpeedDirection:
	.res	2,$00
_gStage:
	.res	2,$00
_gCounter:
	.res	2,$00
_gHealth:
	.res	2,$00
_gIframes:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ vblank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vblank: near

.segment	"CODE"

;
; while((*((unsigned char*)0x2002) & 0x80) != 0x00);
;
L1103:	lda     $2002
	and     #$80
	bne     L1103
;
; while((*((unsigned char*)0x2002) & 0x80) != 0x80);
;
L1104:	lda     $2002
	and     #$80
	cmp     #$80
	bne     L1104
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ vblank_counter (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vblank_counter: near

.segment	"CODE"

;
; vblank();
;
L09D0:	jsr     _vblank
;
; gCounter = gCounter - 1;
;
	lda     _gCounter
	ldx     _gCounter+1
	sec
	sbc     #$01
	bcs     L09D6
	dex
L09D6:	sta     _gCounter
	stx     _gCounter+1
;
; while( gCounter != 0 );
;
	cpx     #$00
	bne     L09D0
	cmp     #$00
	bne     L09D0
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ppuinit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppuinit: near

.segment	"CODE"

;
; PPU_CTRL = 0x84;
;
	lda     #$84
	sta     $2000
;
; PPU_MASK = 0x0E;
;
	lda     #$0E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ppudisable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ppudisable: near

.segment	"CODE"

;
; PPU_CTRL = 0x00;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0x00;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ apuinit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_apuinit: near

.segment	"CODE"

;
; *((unsigned char*)0x4015) = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; *((unsigned char*)0x4000) = 0x30;
;
	lda     #$30
	sta     $4000
;
; *((unsigned char*)0x4001) = 0x08;
;
	lda     #$08
	sta     $4001
;
; *((unsigned char*)0x4002) = 0x00;
;
	lda     #$00
	sta     $4002
;
; *((unsigned char*)0x4003) = 0x00;
;
	sta     $4003
;
; *((unsigned char*)0x4004) = 0x30;
;
	lda     #$30
	sta     $4004
;
; *((unsigned char*)0x4005) = 0x08;
;
	lda     #$08
	sta     $4005
;
; *((unsigned char*)0x4006) = 0x00;
;
	lda     #$00
	sta     $4006
;
; *((unsigned char*)0x4007) = 0x00;
;
	sta     $4007
;
; *((unsigned char*)0x4008) = 0x80;
;
	lda     #$80
	sta     $4008
;
; *((unsigned char*)0x4009) = 0x00;
;
	lda     #$00
	sta     $4009
;
; *((unsigned char*)0x400A) = 0x00;
;
	sta     $400A
;
; *((unsigned char*)0x400B) = 0x00;
;
	sta     $400B
;
; *((unsigned char*)0x400C) = 0x30;
;
	lda     #$30
	sta     $400C
;
; *((unsigned char*)0x400D) = 0x00;
;
	lda     #$00
	sta     $400D
;
; *((unsigned char*)0x400E) = 0x00;
;
	sta     $400E
;
; *((unsigned char*)0x400F) = 0x00;
;
	sta     $400F
;
; *((unsigned char*)0x4010) = 0x00;
;
	sta     $4010
;
; *((unsigned char*)0x4011) = 0x00;
;
	sta     $4011
;
; *((unsigned char*)0x4012) = 0x00;
;
	sta     $4012
;
; *((unsigned char*)0x4013) = 0x00;
;
	sta     $4013
;
; *((unsigned char*)0x4014) = 0x00;
;
	sta     $4014
;
; *((unsigned char*)0x4015) = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; *((unsigned char*)0x4016) = 0x00;
;
	lda     #$00
	sta     $4016
;
; *((unsigned char*)0x4017) = 0x40;
;
	lda     #$40
	sta     $4017
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ set_scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_scroll: near

.segment	"CODE"

;
; devnull = *((unsigned char*)0x2002);
;
	lda     $2002
	sta     _devnull
;
; *((unsigned char*)0x2005) = gXScroll;
;
	lda     _gXScroll
	sta     $2005
;
; *((unsigned char*)0x2005) = gYScroll;
;
	lda     _gYScroll
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ palattes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_palattes: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; PPU_DATA =    0x0E;
;
	lda     #$0E
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x02;
;
	lda     #$02
	sta     $2006
;
; PPU_DATA    = 0x10;
;
	lda     #$10
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x30;
;
	lda     #$30
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x04;
;
	lda     #$04
	sta     $2006
;
; PPU_DATA =    0x0E;
;
	lda     #$0E
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x05;
;
	lda     #$05
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x06;
;
	lda     #$06
	sta     $2006
;
; PPU_DATA    = 0x10;
;
	lda     #$10
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x07;
;
	lda     #$07
	sta     $2006
;
; PPU_DATA    = 0x20;
;
	lda     #$20
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x11;
;
	lda     #$11
	sta     $2006
;
; PPU_DATA    = 0x0A;
;
	lda     #$0A
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x12;
;
	lda     #$12
	sta     $2006
;
; PPU_DATA    = 0x1A;
;
	lda     #$1A
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x13;
;
	lda     #$13
	sta     $2006
;
; PPU_DATA    = 0x30;
;
	lda     #$30
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x15;
;
	lda     #$15
	sta     $2006
;
; PPU_DATA    = 0x11;
;
	lda     #$11
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x16;
;
	lda     #$16
	sta     $2006
;
; PPU_DATA    = 0x02;
;
	lda     #$02
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x17;
;
	lda     #$17
	sta     $2006
;
; PPU_DATA    = 0x27;
;
	lda     #$27
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x19;
;
	lda     #$19
	sta     $2006
;
; PPU_DATA    = 0x06;
;
	lda     #$06
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x1A;
;
	lda     #$1A
	sta     $2006
;
; PPU_DATA    = 0x16;
;
	lda     #$16
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x1B;
;
	lda     #$1B
	sta     $2006
;
; PPU_DATA    = 0x30;
;
	lda     #$30
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x1D;
;
	lda     #$1D
	sta     $2006
;
; PPU_DATA    = 0x16;
;
	lda     #$16
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x1E;
;
	lda     #$1E
	sta     $2006
;
; PPU_DATA    = 0x30;
;
	lda     #$30
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x1F;
;
	lda     #$1F
	sta     $2006
;
; PPU_DATA    = 0x30;
;
	lda     #$30
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; PPU_MASK = 0x0E;
;
	lda     #$0E
	sta     $2001
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; PPU_DATA    = 0x0E;
;
	lda     #$0E
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA    = 0x0E;
;
	lda     #$0E
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x02;
;
	lda     #$02
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x10;
;
	lda     #$10
	sta     $2007
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x02;
;
	lda     #$02
	sta     $2006
;
; PPU_DATA    = 0x0E;
;
	lda     #$0E
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x0E;
;
	lda     #$0E
	sta     $2007
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; PPU_CTRL = 0x00;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0x00;
;
	sta     $2001
;
; set_scroll();
;
	jmp     _set_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; PPU_MASK = 0x0E;
;
	lda     #$0E
	sta     $2001
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x02;
;
	lda     #$02
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x10;
;
	lda     #$10
	sta     $2007
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA    = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x02;
;
	lda     #$02
	sta     $2006
;
; PPU_DATA    = 0x10;
;
	lda     #$10
	sta     $2007
;
; PPU_ADDRESS = 0x3F;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA    = 0x30;
;
	lda     #$30
	sta     $2007
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; if( gStage != 0 )
;
	lda     _gStage
	ora     _gStage+1
	beq     L1106
;
; PPU_MASK = 0x1E;
;
	lda     #$1E
;
; else
;
	jmp     L1105
;
; PPU_MASK = 0x0E;
;
L1106:	lda     #$0E
L1105:	sta     $2001
;
; set_scroll();
;
	jsr     _set_scroll
;
; gCounter = 20;
;
	ldx     #$00
	lda     #$14
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jmp     _vblank_counter

.endproc

; ---------------------------------------------------------------
; void __near__ patterntables (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_patterntables: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_health (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_health: near

.segment	"CODE"

;
; for( i = 0; i < 8; i++)
;
	lda     #$00
	sta     _i
	sta     _i+1
L0BB6:	lda     _i+1
	cmp     #$00
	bne     L0BBD
	lda     _i
	cmp     #$08
L0BBD:	bcc     L1110
;
; }
;
	rts
;
; sprites[40 + (i<<2)] = 0x0F + (i<<3) + i;
;
L1110:	lda     _i
	ldx     _i+1
	jsr     shlax2
	clc
	adc     #$28
	bcc     L1108
	inx
	clc
L1108:	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     _i
	ldx     _i+1
	jsr     shlax3
	clc
	adc     #$0F
	bcc     L1109
	inx
	clc
L1109:	adc     _i
	pha
	txa
	adc     _i+1
	pla
	ldy     #$00
	sta     (ptr1),y
;
; sprites[41 + (i<<2)] = 0x07;
;
	lda     _i
	ldx     _i+1
	jsr     shlax2
	clc
	adc     #$29
	bcc     L110A
	inx
	clc
L110A:	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$07
	sta     (ptr1),y
;
; if( gHealth > i )
;
	lda     _gHealth
	sec
	sbc     _i
	sta     tmp1
	lda     _gHealth+1
	sbc     _i+1
	ora     tmp1
	bcc     L0BCC
	beq     L0BCC
;
; sprites[42 + (i<<2)] = 0x02;
;
	lda     _i
	ldx     _i+1
	jsr     shlax2
	clc
	adc     #$2A
	bcc     L110B
	inx
	clc
L110B:	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$02
;
; else
;
	jmp     L110F
;
; sprites[42 + (i<<2)] = 0x03;
;
L0BCC:	lda     _i
	ldx     _i+1
	jsr     shlax2
	clc
	adc     #$2A
	bcc     L110C
	inx
	clc
L110C:	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$03
L110F:	sta     (ptr1),y
;
; sprites[43 + (i<<2)] = 0x10;
;
	lda     _i
	ldx     _i+1
	jsr     shlax2
	clc
	adc     #$2B
	bcc     L110D
	inx
	clc
L110D:	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$10
	sta     (ptr1),y
;
; for( i = 0; i < 8; i++)
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0BBF
	inx
L0BBF:	sta     _i
	stx     _i+1
	jmp     L0BB6

.endproc

; ---------------------------------------------------------------
; void __near__ setup_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_sprites: near

.segment	"CODE"

;
; for( i = 0; i < 256; i++ )
;
	jsr     decsp2
	ldy     #$00
	tya
	sta     (sp),y
	iny
	sta     (sp),y
L0BDF:	ldy     #$01
	lda     (sp),y
	tax
	dey
	cpx     #$01
	bcs     L0BE0
;
; sprites[i] = 0x00;
;
	lda     #<(_sprites)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_sprites)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; for( i = 0; i < 256; i++ )
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0BE7
	inx
L0BE7:	jsr     stax0sp
	jmp     L0BDF
;
; sprites[0] = 0x50;
;
L0BE0:	lda     #$50
	sta     _sprites
;
; sprites[1] = 0x00;
;
	tya
	sta     _sprites+1
;
; sprites[2] = 0x00;
;
	sta     _sprites+2
;
; sprites[3] = 0x50;
;
	lda     #$50
	sta     _sprites+3
;
; sprites[4] = 0x50;
;
	sta     _sprites+4
;
; sprites[5] = 0x01;
;
	lda     #$01
	sta     _sprites+5
;
; sprites[6] = 0x00;
;
	sty     _sprites+6
;
; sprites[7] = 0x58;
;
	lda     #$58
	sta     _sprites+7
;
; sprites[8] = 0x58;
;
	sta     _sprites+8
;
; sprites[9] = 0x02;
;
	lda     #$02
	sta     _sprites+9
;
; sprites[10] = 0x00;
;
	sty     _sprites+10
;
; sprites[11] = 0x50;
;
	lda     #$50
	sta     _sprites+11
;
; sprites[12] = 0x58;
;
	lda     #$58
	sta     _sprites+12
;
; sprites[13] = 0x03;
;
	lda     #$03
	sta     _sprites+13
;
; sprites[14] = 0x00;
;
	sty     _sprites+14
;
; sprites[15] = 0x58;
;
	lda     #$58
	sta     _sprites+15
;
; gX = 0x10;
;
	lda     #$10
	sta     _gX
;
; gY = 0xD0;
;
	lda     #$D0
	sta     _gY
;
; gVelocity = 0;
;
	ldx     #$00
	txa
	sta     _gVelocity
	sta     _gVelocity+1
;
; gVelocityDirection = 0;
;
	sta     _gVelocityDirection
	sta     _gVelocityDirection+1
;
; gSpeed = 0;
;
	sta     _gSpeed
	sta     _gSpeed+1
;
; gSpeedDirection = 1;
;
	lda     #$01
	sta     _gSpeedDirection
	stx     _gSpeedDirection+1
;
; gXScroll = 0;
;
	txa
	sta     _gXScroll
	sta     _gXScroll+1
	sta     _gXScroll+2
	sta     _gXScroll+3
;
; gYScroll = 0;
;
	sta     _gYScroll
;
; gYNametable = 2;
;
	lda     #$02
	sta     _gYNametable
;
; gJumping = 1;
;
	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; gBounceCounter = 0;
;
	txa
	sta     _gBounceCounter
	sta     _gBounceCounter+1
;
; gStage = 0;
;
	sta     _gStage
	sta     _gStage+1
;
; gHealth = 8;
;
	lda     #$08
	sta     _gHealth
	stx     _gHealth+1
;
; gIframes = 0;
;
	txa
	sta     _gIframes
	sta     _gIframes+1
;
; sprites[16] = 0x30;
;
	lda     #$30
	sta     _sprites+16
;
; sprites[17] = 0x04;
;
	lda     #$04
	sta     _sprites+17
;
; sprites[18] = 0x02;
;
	lda     #$02
	sta     _sprites+18
;
; sprites[19] = 0x50;
;
	lda     #$50
	sta     _sprites+19
;
; sprites[20] = 0x30;
;
	lda     #$30
	sta     _sprites+20
;
; sprites[21] = 0x05;
;
	lda     #$05
	sta     _sprites+21
;
; sprites[22] = 0x02;
;
	lda     #$02
	sta     _sprites+22
;
; sprites[23] = 0x58;
;
	lda     #$58
	sta     _sprites+23
;
; draw_health();
;
	jsr     _draw_health
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ dma_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dma_sprites: near

.segment	"CODE"

;
; *((unsigned char*)0x4013) = 0x00;
;
	lda     #$00
	sta     $4013
;
; *((unsigned char*)0x4014) = 0x02;
;
	lda     #$02
	sta     $4014
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ input_poll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input_poll: near

.segment	"CODE"

;
; *((unsigned char*)0x4016) |= 0x01;
;
	lda     $4016
	ora     #$01
	sta     $4016
;
; *((unsigned char*)0x4016) &= 0xFE;
;
	and     #$FE
	sta     $4016
;
; gPrevController1 = gController1;
;
	lda     _gController1
	sta     _gPrevController1
;
; gController1 = 0x00;
;
	lda     #$00
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
	lda     $4016
	and     #$01
	beq     L1113
;
; gController1 |= BUTTON_A;
;
	lda     _gController1
	ora     #$80
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1113:	lda     $4016
	and     #$01
	beq     L1114
;
; gController1 |= BUTTON_B;
;
	lda     _gController1
	ora     #$40
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1114:	lda     $4016
	and     #$01
	beq     L1115
;
; gController1 |= BUTTON_SELECT;
;
	lda     _gController1
	ora     #$20
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1115:	lda     $4016
	and     #$01
	beq     L1116
;
; gController1 |= BUTTON_START;
;
	lda     _gController1
	ora     #$10
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1116:	lda     $4016
	and     #$01
	beq     L1117
;
; gController1 |= BUTTON_UP;
;
	lda     _gController1
	ora     #$08
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1117:	lda     $4016
	and     #$01
	beq     L1118
;
; gController1 |= BUTTON_DOWN;
;
	lda     _gController1
	ora     #$04
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1118:	lda     $4016
	and     #$01
	beq     L1119
;
; gController1 |= BUTTON_LEFT;
;
	lda     _gController1
	ora     #$02
	sta     _gController1
;
; if(*((unsigned char*)0x4016) & 0x01)
;
L1119:	lda     $4016
	and     #$01
	beq     L111A
;
; gController1 |= BUTTON_RIGHT;
;
	lda     _gController1
	ora     #$01
	sta     _gController1
;
; if( ((gController1 & BUTTON_A) == BUTTON_A && (gPrevController1 & BUTTON_A) == 0) ||
;
L111A:	lda     _gController1
	and     #$80
	cmp     #$80
	bne     L111D
	lda     _gPrevController1
	and     #$80
	beq     L1124
;
; ((gController1 & BUTTON_A) == 0 && (gPrevController1 & BUTTON_A) == BUTTON_A))
;
L111D:	lda     _gController1
	and     #$80
	bne     L1121
	lda     _gPrevController1
	and     #$80
	cmp     #$80
	beq     L1124
	rts
L1121:	rts
;
; gPrevController1Change = gPrevController1;
;
L1124:	lda     _gPrevController1
	sta     _gPrevController1Change
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ small_jump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_small_jump: near

.segment	"CODE"

;
; if(gJumping == 0) {
;
	lda     _gJumping
	ora     _gJumping+1
	bne     L0C9E
;
; gJumping = 1;
;
	tax
	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; gVelocity = 6;
;
	lda     #$06
	sta     _gVelocity
	stx     _gVelocity+1
;
; gVelocityDirection = 1;
;
	lda     #$01
	sta     _gVelocityDirection
	stx     _gVelocityDirection+1
;
; }
;
L0C9E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ big_jump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_big_jump: near

.segment	"CODE"

;
; if(gJumping == 0) {
;
	lda     _gJumping
	ora     _gJumping+1
	bne     L0CA8
;
; gJumping = 1;
;
	tax
	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; gVelocity = 16;
;
	lda     #$10
	sta     _gVelocity
	stx     _gVelocity+1
;
; gVelocityDirection = 1;
;
	lda     #$01
	sta     _gVelocityDirection
	stx     _gVelocityDirection+1
;
; gPrevController1Change |= BUTTON_A;
;
	lda     _gPrevController1Change
	ora     #$80
	sta     _gPrevController1Change
;
; }
;
L0CA8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_sprites: near

.segment	"CODE"

;
; if(gController1 & BUTTON_UP)
;
	lda     _gController1
	ldx     #$00
	and     #$08
	stx     tmp1
	ora     tmp1
;
; if(gController1 & BUTTON_DOWN)
;
	lda     _gController1
	and     #$04
	ora     tmp1
;
; if(gController1 & BUTTON_LEFT)
;
	lda     _gController1
	and     #$02
	beq     L1126
;
; if( gSpeedDirection == 0 )
;
	lda     _gSpeedDirection
	ora     _gSpeedDirection+1
	bne     L0CBA
;
; if( gSpeed < 12 )
;
	lda     _gSpeed+1
	cmp     #$00
	bne     L0CBF
	lda     _gSpeed
	cmp     #$0C
L0CBF:	bcs     L1126
;
; ++gSpeed;
;
	inc     _gSpeed
	bne     L1126
	inc     _gSpeed+1
;
; else
;
	jmp     L1126
;
; if( gSpeed == 0 )
;
L0CBA:	lda     _gSpeed
	ora     _gSpeed+1
	bne     L0CC3
;
; gSpeed = 1;
;
	lda     #$01
	sta     _gSpeed
	stx     _gSpeed+1
;
; gSpeedDirection = 0;
;
	txa
	sta     _gSpeedDirection
	sta     _gSpeedDirection+1
;
; sprites[1] = 0x01;
;
	lda     #$01
	sta     _sprites+1
;
; sprites[2] = 0x40;
;
	lda     #$40
	sta     _sprites+2
;
; sprites[5] = 0x00;
;
	stx     _sprites+5
;
; sprites[6] = 0x40;
;
	lda     #$40
	sta     _sprites+6
;
; sprites[9] = 0x03;
;
	lda     #$03
	sta     _sprites+9
;
; sprites[10] = 0x40;
;
	lda     #$40
	sta     _sprites+10
;
; sprites[13] = 0x02;
;
	lda     #$02
	sta     _sprites+13
;
; sprites[14] = 0x40;
;
	lda     #$40
	sta     _sprites+14
;
; else
;
	jmp     L1126
;
; --gSpeed;
;
L0CC3:	lda     _gSpeed
	sec
	sbc     #$01
	sta     _gSpeed
	bcs     L1126
	dec     _gSpeed+1
;
; if(gController1 & BUTTON_RIGHT)
;
L1126:	lda     _gController1
	and     #$01
	beq     L1127
;
; if( gSpeedDirection == 1 )
;
	lda     _gSpeedDirection+1
	bne     L0CE7
	lda     _gSpeedDirection
	cmp     #$01
	bne     L0CE7
;
; if( gSpeed < 12 )
;
	lda     _gSpeed+1
	cmp     #$00
	bne     L0CEC
	lda     _gSpeed
	cmp     #$0C
L0CEC:	bcs     L1127
;
; ++gSpeed;
;
	inc     _gSpeed
	bne     L1127
	inc     _gSpeed+1
;
; else
;
	jmp     L1127
;
; if( gSpeed == 0 )
;
L0CE7:	lda     _gSpeed
	ora     _gSpeed+1
	bne     L0CF0
;
; gSpeed = 1;
;
	lda     #$01
	sta     _gSpeed
	stx     _gSpeed+1
;
; gSpeedDirection = 1;
;
	sta     _gSpeedDirection
	stx     _gSpeedDirection+1
;
; sprites[1] = 0x00;
;
	txa
	sta     _sprites+1
;
; sprites[2] = 0x00;
;
	sta     _sprites+2
;
; sprites[5] = 0x01;
;
	lda     #$01
	sta     _sprites+5
;
; sprites[6] = 0x00;
;
	stx     _sprites+6
;
; sprites[9] = 0x02;
;
	lda     #$02
	sta     _sprites+9
;
; sprites[10] = 0x00;
;
	stx     _sprites+10
;
; sprites[13] = 0x03;
;
	lda     #$03
	sta     _sprites+13
;
; sprites[14] = 0x00;
;
	stx     _sprites+14
;
; else
;
	jmp     L1127
;
; --gSpeed;
;
L0CF0:	lda     _gSpeed
	sec
	sbc     #$01
	sta     _gSpeed
	bcs     L1127
	dec     _gSpeed+1
;
; if( ((gController1 & (BUTTON_RIGHT | BUTTON_LEFT)) == 0) && (gSpeed > 0) )
;
L1127:	lda     _gController1
	and     #$03
	bne     L112A
	lda     _gSpeed
	ora     _gSpeed+1
	beq     L112A
;
; --gSpeed;
;
	lda     _gSpeed
	sec
	sbc     #$01
	sta     _gSpeed
	bcs     L112A
	dec     _gSpeed+1
;
; if(gController1 & BUTTON_B)
;
L112A:	lda     _gController1
	and     #$40
	ora     tmp1
;
; if(((gController1 & BUTTON_A) > 0) && ((gPrevController1Change & BUTTON_A) == 0))
;
	lda     _gController1
	and     #$80
	beq     L112E
	lda     _gPrevController1Change
	and     #$80
	bne     L112E
;
; big_jump();
;
	jsr     _big_jump
;
; if(!((gController1 & BUTTON_A) || (gController1 & BUTTON_B)))
;
L112E:	lda     _gController1
	and     #$80
	bne     L112F
	lda     _gController1
	and     #$40
	beq     L0D30
L112F:	lda     #$01
L0D30:	jsr     bnega
;
; sprites[0] = gY;
;
	lda     _gY
	sta     _sprites
;
; sprites[3] = gX;
;
	lda     _gX
	sta     _sprites+3
;
; sprites[4] = gY;
;
	lda     _gY
	sta     _sprites+4
;
; sprites[7] = gX+8;
;
	lda     _gX
	clc
	adc     #$08
	sta     _sprites+7
;
; sprites[8] = gY+8;
;
	lda     _gY
	clc
	adc     #$08
	sta     _sprites+8
;
; sprites[11] = gX;
;
	lda     _gX
	sta     _sprites+11
;
; sprites[12] = gY+8;
;
	lda     _gY
	clc
	adc     #$08
	sta     _sprites+12
;
; sprites[15] = gX+8;
;
	lda     _gX
	clc
	adc     #$08
	sta     _sprites+15
;
; if( gIframes > 0 )
;
	lda     _gIframes
	ora     _gIframes+1
	beq     L1130
;
; sprites[2]  ^= 2;
;
	lda     _sprites+2
	eor     #$02
	sta     _sprites+2
;
; sprites[6]  ^= 2;
;
	lda     _sprites+6
	eor     #$02
	sta     _sprites+6
;
; sprites[10] ^= 2;
;
	lda     _sprites+10
	eor     #$02
	sta     _sprites+10
;
; sprites[14] ^= 2;
;
	lda     _sprites+14
	eor     #$02
;
; else
;
	jmp     L1125
;
; sprites[2]  &= 0xFC;
;
L1130:	lda     _sprites+2
	and     #$FC
	sta     _sprites+2
;
; sprites[6]  &= 0xFC;
;
	lda     _sprites+6
	and     #$FC
	sta     _sprites+6
;
; sprites[10] &= 0xFC;
;
	lda     _sprites+10
	and     #$FC
	sta     _sprites+10
;
; sprites[14] &= 0xFC;
;
	lda     _sprites+14
	and     #$FC
L1125:	sta     _sprites+14
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_stage (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_stage: near

.segment	"CODE"

;
; fade_out();
;
	jsr     _fade_out
;
; if( gStage == 0 )
;
	lda     _gStage
	ora     _gStage+1
	bne     L0D6B
;
; PPU_ADDRESS = 0x28; // address of nametable #2
;
	lda     #$28
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Level0Bottom); // uncompresses our data
;
	lda     #<(_Level0Bottom)
	ldx     #>(_Level0Bottom)
	jsr     _UnRLE
;
; if( gStage == 1 )
;
L0D6B:	lda     _gStage+1
	bne     L0D76
	lda     _gStage
	cmp     #$01
	bne     L0D76
;
; PPU_ADDRESS = 0x28; // address of nametable #2
;
	lda     #$28
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Level1Bottom); // uncompresses our data
;
	lda     #<(_Level1Bottom)
	ldx     #>(_Level1Bottom)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x20; // address of nametable #2
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Level1Top); // uncompresses our data
;
	lda     #<(_Level1Top)
	ldx     #>(_Level1Top)
	jsr     _UnRLE
;
; if( gStage == 2 )
;
L0D76:	lda     _gStage+1
	bne     L0D89
	lda     _gStage
	cmp     #$02
	bne     L0D89
;
; PPU_ADDRESS = 0x28; // address of nametable #2
;
	lda     #$28
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Level2Bottom); // uncompresses our data
;
	lda     #<(_Level2Bottom)
	ldx     #>(_Level2Bottom)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x20; // address of nametable #2
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Level2Top); // uncompresses our data
;
	lda     #<(_Level2Top)
	ldx     #>(_Level2Top)
	jsr     _UnRLE
;
; vblank();
;
L0D89:	jsr     _vblank
;
; gX = 0x10;
;
	lda     #$10
	sta     _gX
;
; gY = 0xD0;
;
	lda     #$D0
	sta     _gY
;
; gYNametable = 2;
;
	lda     #$02
	sta     _gYNametable
;
; gVelocity = 0;
;
	ldx     #$00
	txa
	sta     _gVelocity
	sta     _gVelocity+1
;
; gVelocityDirection = 0;
;
	sta     _gVelocityDirection
	sta     _gVelocityDirection+1
;
; gXScroll = 0;
;
	sta     _gXScroll
	sta     _gXScroll+1
	sta     _gXScroll+2
	sta     _gXScroll+3
;
; gYScroll = 0;
;
	sta     _gYScroll
;
; gSpeed = 0;
;
	sta     _gSpeed
	sta     _gSpeed+1
;
; gSpeedDirection = 1;
;
	lda     #$01
	sta     _gSpeedDirection
	stx     _gSpeedDirection+1
;
; gJumping = 1;
;
	sta     _gJumping
	stx     _gJumping+1
;
; gBounceCounter = 0;
;
	txa
	sta     _gBounceCounter
	sta     _gBounceCounter+1
;
; sprites[1] = 0x00;
;
	sta     _sprites+1
;
; sprites[2] = 0x00;
;
	sta     _sprites+2
;
; sprites[5] = 0x01;
;
	lda     #$01
	sta     _sprites+5
;
; sprites[6] = 0x00;
;
	stx     _sprites+6
;
; sprites[9] = 0x02;
;
	lda     #$02
	sta     _sprites+9
;
; sprites[10] = 0x00;
;
	stx     _sprites+10
;
; sprites[13] = 0x03;
;
	lda     #$03
	sta     _sprites+13
;
; sprites[14] = 0x00;
;
	txa
	sta     _sprites+14
;
; sprites[24] = 0x00;
;
	sta     _sprites+24
;
; sprites[25] = 0x00;
;
	sta     _sprites+25
;
; sprites[26] = 0x00;
;
	sta     _sprites+26
;
; sprites[27] = 0x00;
;
	sta     _sprites+27
;
; sprites[28] = 0x00;
;
	sta     _sprites+28
;
; sprites[29] = 0x00;
;
	sta     _sprites+29
;
; sprites[30] = 0x00;
;
	sta     _sprites+30
;
; sprites[31] = 0x00;
;
	sta     _sprites+31
;
; sprites[32] = 0x00;
;
	sta     _sprites+32
;
; sprites[33] = 0x00;
;
	sta     _sprites+33
;
; sprites[34] = 0x00;
;
	sta     _sprites+34
;
; sprites[35] = 0x00;
;
	sta     _sprites+35
;
; sprites[36] = 0x00;
;
	sta     _sprites+36
;
; sprites[37] = 0x00;
;
	sta     _sprites+37
;
; sprites[38] = 0x00;
;
	sta     _sprites+38
;
; sprites[39] = 0x00;
;
	sta     _sprites+39
;
; update_sprites();
;
	jsr     _update_sprites
;
; dma_sprites();
;
	jsr     _dma_sprites
;
; set_scroll();
;
	jsr     _set_scroll
;
; fade_in();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ do_physics (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_physics: near

.segment	"CODE"

;
; if( (gController1 & BUTTON_START) != 0 )
;
	lda     _gController1
	ldx     #$00
	and     #$10
	beq     L1169
;
; gStage = 1;
;
	lda     #$01
	sta     _gStage
	stx     _gStage+1
;
; load_stage();
;
	jsr     _load_stage
;
; if( sprites[16] != gY )
;
L1169:	lda     _gY
	cmp     _sprites+16
	beq     L116B
;
; if( sprites[16] < gY )
;
	lda     _sprites+16
	cmp     _gY
	bcs     L116A
;
; sprites[16] += 1;
;
	inc     _sprites+16
;
; sprites[20] += 1;
;
	inc     _sprites+20
;
; else
;
	jmp     L116B
;
; sprites[16] -= 1;
;
L116A:	dec     _sprites+16
;
; sprites[20] -= 1;
;
	dec     _sprites+20
;
; if( sprites[19] != gX )
;
L116B:	lda     _gX
	cmp     _sprites+19
	beq     L0E32
;
; if( sprites[19] < gX )
;
	lda     _sprites+19
	cmp     _gX
	bcs     L116C
;
; sprites[19] += 1;
;
	inc     _sprites+19
;
; sprites[23] += 1;
;
	inc     _sprites+23
;
; sprites[21] = 0x04;
;
	lda     #$04
	sta     _sprites+21
;
; sprites[22] = 0x41;
;
	lda     #$41
	sta     _sprites+22
;
; sprites[17] = 0x05;
;
	lda     #$05
	sta     _sprites+17
;
; sprites[18] = 0x41;
;
	lda     #$41
;
; else
;
	jmp     L1154
;
; sprites[19] -= 1;
;
L116C:	dec     _sprites+19
;
; sprites[23] -= 1;
;
	dec     _sprites+23
;
; sprites[21] = 0x05;
;
	lda     #$05
	sta     _sprites+21
;
; sprites[22] = 0x01;
;
	lda     #$01
	sta     _sprites+22
;
; sprites[17] = 0x04;
;
	lda     #$04
	sta     _sprites+17
;
; sprites[18] = 0x01;
;
	lda     #$01
L1154:	sta     _sprites+18
;
; if( gSpeedDirection == 0 )
;
L0E32:	lda     _gSpeedDirection
	ora     _gSpeedDirection+1
	jne     L117B
;
; for( i = 0; (i<<2) < gSpeed; i++ )
;
	sta     _i
	sta     _i+1
L0E48:	lda     _i
	ldx     _i+1
	jsr     shlax2
	cmp     _gSpeed
	txa
	sbc     _gSpeed+1
	jcs     L0EB2
;
; if(gX > 0x08)
;
	lda     _gX
	cmp     #$09
	jcc     L0E4A
;
; if( gYNametable == 2 )
;
	ldx     #$00
	lda     _gYNametable
	cmp     #$02
	bne     L1171
;
; if( collision[240 + (((gY+1)&0xF0)) + ((gX-1) >> 4)] == 0 &&
;
	lda     _gY
	clc
	adc     #$01
	and     #$F0
	clc
	adc     #$F0
	bcc     L0E5D
	inx
L0E5D:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	sec
	sbc     #$01
	bcs     L0E60
	dex
L0E60:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L116D
;
; collision[240 + (((gY+0x10)&0xF0)) + ((gX-1) >> 4)] == 0 )
;
	lda     _gY
	clc
	adc     #$10
	and     #$F0
	clc
	adc     #$F0
	bcc     L0E67
	inx
L0E67:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	sec
	sbc     #$01
	bcs     L0E6A
	dex
L0E6A:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L116E
L116D:	lda     #$00
	jmp     L117A
;
; gX -= 1;
;
L116E:	dec     _gX
;
; small_jump();
;
	jsr     _small_jump
;
; else
;
	jmp     L0E4A
;
; if((gYScroll + gY + 1) >= 0xF0)
;
L1171:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L115A
	inx
	clc
L115A:	adc     #$01
	bcc     L0E76
	inx
L0E76:	cmp     #$F0
	txa
	sbc     #$00
	jcc     L1176
;
; if( collision[240 + (((gYScroll + gY + 1 - 0xF0) & 0xF0) ) + ((gX-1) >> 4)] == 0 &&
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L115B
	clc
L115B:	adc     #$01
	sec
	sbc     #$F0
	ldx     #$00
	and     #$F0
	clc
	adc     #$F0
	bcc     L0E7F
	inx
L0E7F:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	sec
	sbc     #$01
	bcs     L0E82
	dex
L0E82:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L1172
;
; collision[240 + (((gYScroll + gY + 0x10 - 0xF0) & 0xF0) ) + ((gX-1) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L115C
	clc
L115C:	adc     #$10
	sec
	sbc     #$F0
	and     #$F0
	clc
	adc     #$F0
	bcc     L0E8A
	inx
L0E8A:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	sec
	sbc     #$01
	bcs     L0E8D
	dex
L0E8D:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L1173
L1172:	lda     #$00
	jmp     L117A
;
; gX -= 1;
;
L1173:	dec     _gX
;
; small_jump();
;
	jsr     _small_jump
;
; else
;
	jmp     L0E4A
;
; if( collision[(((gYScroll + gY + 1) & 0xF0) ) + ((gX-1) >> 4)] == 0 &&
;
L1176:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L115D
	clc
L115D:	adc     #$01
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _gX
	sec
	sbc     #$01
	bcs     L0E9F
	dex
L0E9F:	jsr     shrax4
	clc
	adc     ptr1
	bcc     L1147
	inx
L1147:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L1177
;
; collision[(((gYScroll + gY + 0x10) & 0xF0) ) + ((gX-1) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L115E
	clc
L115E:	adc     #$10
	and     #$F0
	sta     ptr1
	lda     _gX
	sec
	sbc     #$01
	bcs     L0EA8
	dex
L0EA8:	jsr     shrax4
	clc
	adc     ptr1
	bcc     L1148
	inx
L1148:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L1178
L1177:	lda     #$00
	jmp     L117A
;
; gX -= 1;
;
L1178:	dec     _gX
;
; small_jump();
;
	jsr     _small_jump
;
; else
;
	jmp     L0E4A
;
; gSpeed = 0;
;
L117A:	sta     _gSpeed
	sta     _gSpeed+1
;
; for( i = 0; (i<<2) < gSpeed; i++ )
;
L0E4A:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0E51
	inx
L0E51:	sta     _i
	stx     _i+1
	jmp     L0E48
;
; for( i = 0; (i<<2) < gSpeed; i++ )
;
L117B:	lda     #$00
	sta     _i
	sta     _i+1
L0EB1:	lda     _i
	ldx     _i+1
	jsr     shlax2
	cmp     _gSpeed
	txa
	sbc     _gSpeed+1
	jcs     L0EB2
;
; if(gX < 0xE8)
;
	lda     _gX
	cmp     #$E8
	jcs     L0EB3
;
; if( gYNametable == 2 )
;
	ldx     #$00
	lda     _gYNametable
	cmp     #$02
	bne     L1180
;
; if( collision[240 + (((gY+1)&0xF0) ) + ((gX+0x10) >> 4)] == 0 &&
;
	lda     _gY
	clc
	adc     #$01
	and     #$F0
	clc
	adc     #$F0
	bcc     L0EC6
	inx
L0EC6:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$10
	bcc     L0EC9
	inx
L0EC9:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L117C
;
; collision[240 + (((gY+0x10)&0xF0) ) + ((gX+0x10) >> 4)] == 0 )
;
	lda     _gY
	clc
	adc     #$10
	and     #$F0
	clc
	adc     #$F0
	bcc     L0ED0
	inx
L0ED0:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$10
	bcc     L0ED3
	inx
L0ED3:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L117D
L117C:	lda     #$00
	jmp     L1189
;
; gX += 1;
;
L117D:	inc     _gX
;
; small_jump();
;
	jsr     _small_jump
;
; else
;
	jmp     L0EB3
;
; if((gYScroll + gY + 1) >= 0xF0)
;
L1180:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L115F
	inx
	clc
L115F:	adc     #$01
	bcc     L0EDF
	inx
L0EDF:	cmp     #$F0
	txa
	sbc     #$00
	jcc     L1185
;
; if( collision[240 + (((gYScroll + gY + 1 - 0xF0) & 0xF0) ) + ((gX+0x10) >> 4)] == 0 &&
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1160
	clc
L1160:	adc     #$01
	sec
	sbc     #$F0
	ldx     #$00
	and     #$F0
	clc
	adc     #$F0
	bcc     L0EE8
	inx
L0EE8:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$10
	bcc     L0EEB
	inx
L0EEB:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L1181
;
; collision[240 + (((gYScroll + gY + 0x10 - 0xF0) & 0xF0) ) + ((gX+0x10) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1161
	clc
L1161:	adc     #$10
	sec
	sbc     #$F0
	and     #$F0
	clc
	adc     #$F0
	bcc     L0EF3
	inx
L0EF3:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$10
	bcc     L0EF6
	inx
L0EF6:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L1182
L1181:	lda     #$00
	jmp     L1189
;
; gX += 1;
;
L1182:	inc     _gX
;
; small_jump();
;
	jsr     _small_jump
;
; else
;
	jmp     L0EB3
;
; if( collision[(((gYScroll + gY + 1) & 0xF0) ) + ((gX+0x10) >> 4)] == 0 &&
;
L1185:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1162
	clc
L1162:	adc     #$01
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _gX
	clc
	adc     #$10
	bcc     L0F08
	inx
L0F08:	jsr     shrax4
	clc
	adc     ptr1
	bcc     L1149
	inx
L1149:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L1186
;
; collision[(((gYScroll + gY + 0x10) & 0xF0) ) + ((gX+0x10) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1163
	clc
L1163:	adc     #$10
	and     #$F0
	sta     ptr1
	lda     _gX
	clc
	adc     #$10
	bcc     L0F11
	inx
L0F11:	jsr     shrax4
	clc
	adc     ptr1
	bcc     L114A
	inx
L114A:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L1187
L1186:	lda     #$00
	jmp     L1189
;
; gX += 1;
;
L1187:	inc     _gX
;
; small_jump();
;
	jsr     _small_jump
;
; else
;
	jmp     L0EB3
;
; gSpeed = 0;
;
L1189:	sta     _gSpeed
	sta     _gSpeed+1
;
; for( i = 0; (i<<2) < gSpeed; i++ )
;
L0EB3:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0EBA
	inx
L0EBA:	sta     _i
	stx     _i+1
	jmp     L0EB1
;
; if( gVelocityDirection == 1 ) // moving up
;
L0EB2:	lda     _gVelocityDirection+1
	jne     L0F19
	lda     _gVelocityDirection
	cmp     #$01
	jne     L0F19
;
; for( i = 0; (i<<2) < gVelocity; i++ )
;
	lda     #$00
	sta     _i
	sta     _i+1
L0F1C:	lda     _i
	ldx     _i+1
	jsr     shlax2
	cmp     _gVelocity
	txa
	sbc     _gVelocity+1
	jcs     L0F1D
;
; if( gYNametable == 2 )
;
	ldx     #$00
	lda     _gYNametable
	cmp     #$02
	jne     L118F
;
; if( collision[240 + (((gY)&0xF0) ) + ((gX) >> 4)] == 0 &&
;
	lda     _gY
	and     #$F0
	clc
	adc     #$F0
	bcc     L0F2E
	inx
L0F2E:	sta     ptr1
	stx     ptr1+1
	lda     _gX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L118A
;
; collision[240 + (((gY)&0xF0) ) + ((gX+0xF) >> 4)] == 0 )
;
	lda     _gY
	and     #$F0
	clc
	adc     #$F0
	bcc     L0F36
	inx
L0F36:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$0F
	bcc     L0F39
	inx
L0F39:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L118B
L118A:	lda     #$00
	jmp     L118E
;
; if(gY > 0x0F)
;
L118B:	lda     _gY
	cmp     #$10
	bcc     L118C
;
; gY -= 1;
;
	dec     _gY
;
; else
;
	jmp     L0F1E
;
; gYScroll = 0xEF;
;
L118C:	lda     #$EF
	sta     _gYScroll
;
; gYNametable = 0;
;
	lda     #$00
	sta     _gYNametable
;
; else
;
	jmp     L0F1E
;
; gVelocity = 0;
;
L118E:	sta     _gVelocity
	sta     _gVelocity+1
;
; gVelocityDirection = 0;
;
	sta     _gVelocityDirection
	sta     _gVelocityDirection+1
;
; break;
;
	jmp     L0F1D
;
; else if((gYScroll + gY) >= 0xF0 )
;
L118F:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L113B
	inx
L113B:	cmp     #$F0
	txa
	sbc     #$00
	ldx     #$00
	jcc     L1195
;
; if( collision[240 + (((gYScroll + gY - 0xF0)&0xF0) ) + ((gX) >> 4)] == 0 &&
;
	lda     _gYScroll
	clc
	adc     _gY
	sec
	sbc     #$F0
	and     #$F0
	clc
	adc     #$F0
	bcc     L0F54
	inx
L0F54:	sta     ptr1
	stx     ptr1+1
	lda     _gX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L1190
;
; collision[240 + (((gYScroll + gY - 0xF0)&0xF0) ) + ((gX+0xF) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	sec
	sbc     #$F0
	and     #$F0
	clc
	adc     #$F0
	bcc     L0F5D
	inx
L0F5D:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$0F
	bcc     L0F60
	inx
L0F60:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L1191
L1190:	lda     #$00
	jmp     L1194
;
; if(gY > 0x0F)
;
L1191:	lda     _gY
	cmp     #$10
	bcc     L1192
;
; gY -= 1;
;
	dec     _gY
;
; else
;
	jmp     L0F1E
;
; gYScroll -= 1;
;
L1192:	dec     _gYScroll
;
; else
;
	jmp     L0F1E
;
; gVelocityDirection = 0;
;
L1194:	sta     _gVelocityDirection
	sta     _gVelocityDirection+1
;
; gJumping = 0;
;
	sta     _gJumping
	sta     _gJumping+1
;
; break;
;
	jmp     L0F1D
;
; if( collision[(((gYScroll + gY - 0x100) & 0xF0) ) + ((gX) >> 4)] == 0 &&
;
L1195:	lda     _gYScroll
	clc
	adc     _gY
	and     #$F0
	sta     ptr1
	lda     _gX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	bcc     L114B
	inx
L114B:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	bne     L1196
;
; collision[(((gYScroll + gY - 0x100) & 0xF0) ) + ((gX+0xF) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _gX
	clc
	adc     #$0F
	bcc     L0F7E
	inx
L0F7E:	jsr     shrax4
	clc
	adc     ptr1
	bcc     L114C
	inx
L114C:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L1197
L1196:	lda     #$00
	jmp     L119A
;
; if(gY > 0x0F)
;
L1197:	lda     _gY
	cmp     #$10
	bcc     L1198
;
; gY -= 1;
;
	dec     _gY
;
; else
;
	jmp     L0F1E
;
; if( gYScroll > 0 )
;
L1198:	lda     _gYScroll
	beq     L0F1E
;
; gYScroll -= 1;
;
	dec     _gYScroll
;
; else
;
	jmp     L0F1E
;
; gVelocity = 0;
;
L119A:	sta     _gVelocity
	sta     _gVelocity+1
;
; gVelocityDirection = 0;
;
	sta     _gVelocityDirection
	sta     _gVelocityDirection+1
;
; break;
;
	jmp     L0F1D
;
; for( i = 0; (i<<2) < gVelocity; i++ )
;
L0F1E:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0F25
	inx
L0F25:	sta     _i
	stx     _i+1
	jmp     L0F1C
;
; if( i == ((gVelocity+3)>>2) )
;
L0F1D:	lda     _gVelocity
	ldx     _gVelocity+1
	clc
	adc     #$03
	bcc     L0F92
	inx
L0F92:	jsr     shrax2
	cpx     _i+1
	jne     L11AE
	cmp     _i
	jne     L11AE
;
; if( gVelocity == 0 )
;
	lda     _gVelocity
	ora     _gVelocity+1
	bne     L0F93
;
; gVelocityDirection = 0;
;
	sta     _gVelocityDirection
	sta     _gVelocityDirection+1
;
; else
;
	jmp     L11AE
;
; gVelocity -= 1;
;
L0F93:	lda     _gVelocity
	sec
	sbc     #$01
	sta     _gVelocity
	jcs     L11AE
	dec     _gVelocity+1
;
; else // moving down
;
	jmp     L11AE
;
; for( i = 0; (i<<2) < gVelocity; i++ )
;
L0F19:	lda     #$00
	sta     _i
	sta     _i+1
L0F9D:	lda     _i
	ldx     _i+1
	jsr     shlax2
	cmp     _gVelocity
	txa
	sbc     _gVelocity+1
	jcs     L0F9E
;
; if(gYNametable == 2 )
;
	ldx     #$00
	lda     _gYNametable
	cmp     #$02
	jne     L11A0
;
; if( collision[240 + (((gY+0x11)&0xF0) ) + ((gX) >> 4)] == 0 &&
;
	lda     _gY
	clc
	adc     #$11
	and     #$F0
	clc
	adc     #$F0
	bcc     L0FB0
	inx
L0FB0:	sta     ptr1
	stx     ptr1+1
	lda     _gX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L119B
;
; collision[240 + (((gY+0x11)&0xF0) ) + ((gX+0xF) >> 4)] == 0 )
;
	lda     _gY
	clc
	adc     #$11
	and     #$F0
	clc
	adc     #$F0
	bcc     L0FB9
	inx
L0FB9:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$0F
	bcc     L0FBC
	inx
L0FBC:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L119C
L119B:	lda     #$00
	jmp     L119F
;
; if(gY < 0xCF)
;
L119C:	tax
	lda     _gY
	cmp     #$CF
	bcs     L119D
;
; gY += 1;
;
	inc     _gY
;
; gJumping = 1;
;
	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; else
;
	jmp     L0F9F
;
; gVelocity = 0;
;
L119D:	txa
	sta     _gVelocity
	sta     _gVelocity+1
;
; gJumping = 0;
;
	sta     _gJumping
	sta     _gJumping+1
;
; break;
;
	jmp     L0F9E
;
; gVelocity = 0;
;
L119F:	sta     _gVelocity
	sta     _gVelocity+1
;
; gJumping = 0;
;
	sta     _gJumping
	sta     _gJumping+1
;
; break;
;
	jmp     L0F9E
;
; else if((gYScroll + gY + 0x11) >= 0xF0)
;
L11A0:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1164
	inx
	clc
L1164:	adc     #$11
	bcc     L0FD2
	inx
L0FD2:	cmp     #$F0
	txa
	sbc     #$00
	jcc     L11A7
;
; if( collision[240 + (((gYScroll + gY+0x11 - 0xF0)&0xF0) ) + ((gX) >> 4)] == 0 &&
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1165
	clc
L1165:	adc     #$11
	sec
	sbc     #$F0
	ldx     #$00
	and     #$F0
	clc
	adc     #$F0
	bcc     L0FDB
	inx
L0FDB:	sta     ptr1
	stx     ptr1+1
	lda     _gX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L11A1
;
; collision[240 + (((gYScroll + gY+0x11 - 0xF0)&0xF0) ) + ((gX+0xF) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1166
	clc
L1166:	adc     #$11
	sec
	sbc     #$F0
	and     #$F0
	clc
	adc     #$F0
	bcc     L0FE5
	inx
L0FE5:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _gX
	clc
	adc     #$0F
	bcc     L0FE8
	inx
L0FE8:	jsr     shrax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L11A2
L11A1:	lda     #$00
	jmp     L11A6
;
; if(gY < 0xCF)
;
L11A2:	lda     _gY
	cmp     #$CF
	bcs     L11A3
;
; gY += 1;
;
	inc     _gY
;
; gJumping = 1;
;
	ldx     #$00
	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; else
;
	jmp     L0F9F
;
; if( gYScroll == 0xEF )
;
L11A3:	lda     _gYScroll
	cmp     #$EF
	bne     L11A4
;
; gYNametable = 2;
;
	lda     #$02
	sta     _gYNametable
;
; gYScroll = 0;
;
	lda     #$00
	sta     _gYScroll
;
; gVelocity = 0;
;
	sta     _gVelocity
	sta     _gVelocity+1
;
; gJumping = 0;
;
	sta     _gJumping
	sta     _gJumping+1
;
; break;
;
	jmp     L0F9E
;
; gYScroll+=1;
;
L11A4:	inc     _gYScroll
;
; gJumping = 1;
;
	ldx     #$00
	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; else
;
	jmp     L0F9F
;
; gVelocity = 0;
;
L11A6:	sta     _gVelocity
	sta     _gVelocity+1
;
; gJumping = 0;
;
	sta     _gJumping
	sta     _gJumping+1
;
; break;
;
	jmp     L0F9E
;
; if( collision[(((gYScroll + gY+0x11)&0xF0) ) + ((gX) >> 4)] == 0 &&
;
L11A7:	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1167
	clc
L1167:	adc     #$11
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _gX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	bcc     L114E
	inx
L114E:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	ldx     #$00
	lda     (ptr1),y
	bne     L11A8
;
; collision[(((gYScroll + gY+0x11)&0xF0) ) + ((gX+0xF) >> 4)] == 0 )
;
	lda     _gYScroll
	clc
	adc     _gY
	bcc     L1168
	clc
L1168:	adc     #$11
	and     #$F0
	sta     ptr1
	lda     _gX
	clc
	adc     #$0F
	bcc     L1017
	inx
L1017:	jsr     shrax4
	clc
	adc     ptr1
	bcc     L114F
	inx
L114F:	sta     ptr1
	txa
	clc
	adc     #>(_collision)
	sta     ptr1+1
	ldy     #<(_collision)
	lda     (ptr1),y
	beq     L11A9
L11A8:	lda     #$00
	jmp     L11AD
;
; if(gY < 0xCF)
;
L11A9:	lda     _gY
	cmp     #$CF
	bcs     L11AA
;
; gY += 1;
;
	ldx     #$00
	inc     _gY
;
; else
;
	jmp     L11AB
;
; gYScroll+=1;
;
L11AA:	inc     _gYScroll
;
; gJumping = 1;
;
	ldx     #$00
L11AB:	lda     #$01
	sta     _gJumping
	stx     _gJumping+1
;
; else
;
	jmp     L0F9F
;
; gVelocity = 0;
;
L11AD:	sta     _gVelocity
	sta     _gVelocity+1
;
; gJumping = 0;
;
	sta     _gJumping
	sta     _gJumping+1
;
; break;
;
	jmp     L0F9E
;
; for( i = 0; (i<<2) < gVelocity; i++ )
;
L0F9F:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0FA6
	inx
L0FA6:	sta     _i
	stx     _i+1
	jmp     L0F9D
;
; if( i == ((gVelocity+3)>>2) )
;
L0F9E:	lda     _gVelocity
	ldx     _gVelocity+1
	clc
	adc     #$03
	bcc     L102B
	inx
L102B:	jsr     shrax2
	cpx     _i+1
	bne     L11AE
	cmp     _i
	bne     L11AE
;
; gVelocity+=1;
;
	inc     _gVelocity
	bne     L11AE
	inc     _gVelocity+1
;
; if( gYNametable == 0 && gYScroll < 0x28)
;
L11AE:	lda     _gYNametable
	bne     L11AF
	lda     _gYScroll
	cmp     #$28
	bcc     L11B0
L11AF:	lda     #$00
	jmp     L11B3
;
; if( gYScroll < 0x20 )
;
L11B0:	lda     _gYScroll
	cmp     #$20
	bcs     L11B1
;
; sprites[24] = 0x0F - gYScroll;
;
	lda     #$0F
	sec
	sbc     _gYScroll
	sta     _sprites+24
;
; sprites[25] = 0x06;
;
	lda     #$06
	sta     _sprites+25
;
; sprites[26] = 0x00;
;
	lda     #$00
	sta     _sprites+26
;
; sprites[27] = 0xE0;
;
	lda     #$E0
	sta     _sprites+27
;
; sprites[28] = 0x0F - gYScroll;
;
	lda     #$0F
	sec
	sbc     _gYScroll
	sta     _sprites+28
;
; sprites[29] = 0x06;
;
	lda     #$06
	sta     _sprites+29
;
; sprites[30] = 0x40;
;
	lda     #$40
	sta     _sprites+30
;
; sprites[31] = 0xE8;
;
	lda     #$E8
;
; else
;
	jmp     L1158
;
; sprites[24] = 0x00;
;
L11B1:	lda     #$00
	sta     _sprites+24
;
; sprites[25] = 0x00;
;
	sta     _sprites+25
;
; sprites[26] = 0x00;
;
	sta     _sprites+26
;
; sprites[27] = 0x00;
;
	sta     _sprites+27
;
; sprites[28] = 0x00;
;
	sta     _sprites+28
;
; sprites[29] = 0x00;
;
	sta     _sprites+29
;
; sprites[30] = 0x00;
;
	sta     _sprites+30
;
; sprites[31] = 0x00;
;
L1158:	sta     _sprites+31
;
; sprites[32] = 0x17 - gYScroll;
;
	lda     #$17
	sec
	sbc     _gYScroll
	sta     _sprites+32
;
; sprites[33] = 0x06;
;
	lda     #$06
	sta     _sprites+33
;
; sprites[34] = 0x80;
;
	lda     #$80
	sta     _sprites+34
;
; sprites[35] = 0xE0;
;
	lda     #$E0
	sta     _sprites+35
;
; sprites[36] = 0x17 - gYScroll;
;
	lda     #$17
	sec
	sbc     _gYScroll
	sta     _sprites+36
;
; sprites[37] = 0x06;
;
	lda     #$06
	sta     _sprites+37
;
; sprites[38] = 0xC0;
;
	lda     #$C0
	sta     _sprites+38
;
; sprites[39] = 0xE8;
;
	lda     #$E8
;
; else
;
	jmp     L1159
;
; sprites[24] = 0x00;
;
L11B3:	sta     _sprites+24
;
; sprites[25] = 0x00;
;
	sta     _sprites+25
;
; sprites[26] = 0x00;
;
	sta     _sprites+26
;
; sprites[27] = 0x00;
;
	sta     _sprites+27
;
; sprites[28] = 0x00;
;
	sta     _sprites+28
;
; sprites[29] = 0x00;
;
	sta     _sprites+29
;
; sprites[30] = 0x00;
;
	sta     _sprites+30
;
; sprites[31] = 0x00;
;
	sta     _sprites+31
;
; sprites[32] = 0x00;
;
	sta     _sprites+32
;
; sprites[33] = 0x00;
;
	sta     _sprites+33
;
; sprites[34] = 0x00;
;
	sta     _sprites+34
;
; sprites[35] = 0x00;
;
	sta     _sprites+35
;
; sprites[36] = 0x00;
;
	sta     _sprites+36
;
; sprites[37] = 0x00;
;
	sta     _sprites+37
;
; sprites[38] = 0x00;
;
	sta     _sprites+38
;
; sprites[39] = 0x00;
;
L1159:	sta     _sprites+39
;
; if( gYNametable == 0 && gY == 0x0F && gX == 0xE0 )
;
	lda     _gYNametable
	bne     L11B6
	lda     _gY
	cmp     #$0F
	bne     L11B6
	lda     _gX
	cmp     #$E0
	bne     L11B6
;
; if( gStage == 1 )
;
	lda     _gStage+1
	bne     L11B6
	lda     _gStage
	cmp     #$01
	bne     L11B6
;
; gStage = 2;
;
	ldx     #$00
	lda     #$02
	sta     _gStage
	stx     _gStage+1
;
; load_stage();
;
	jsr     _load_stage
;
; if( sprites[16] == gY && sprites[19] == gX && gIframes == 0)
;
L11B6:	lda     _gY
	cmp     _sprites+16
	bne     L10D2
	lda     _gX
	cmp     _sprites+19
	bne     L10D2
	lda     _gIframes
	ora     _gIframes+1
	bne     L10D2
;
; if( gHealth > 0 )
;
	lda     _gHealth
	ora     _gHealth+1
	beq     L10D2
;
; if( gStage != 0 )
;
	lda     _gStage
	ora     _gStage+1
	beq     L10C3
;
; --gHealth;
;
	lda     _gHealth
	sec
	sbc     #$01
	sta     _gHealth
	bcs     L10C3
	dec     _gHealth+1
;
; draw_health();
;
L10C3:	jsr     _draw_health
;
; if( gHealth == 0 )
;
	lda     _gHealth
	ora     _gHealth+1
	bne     L10C9
;
; gHealth = 8;
;
	tax
	lda     #$08
	sta     _gHealth
	stx     _gHealth+1
;
; gStage = 0;
;
	txa
	sta     _gStage
	sta     _gStage+1
;
; load_stage();
;
	jsr     _load_stage
;
; draw_health();
;
	jsr     _draw_health
;
; else
;
	jmp     L10D2
;
; gIframes = 120;
;
L10C9:	ldx     #$00
	lda     #$78
	sta     _gIframes
	stx     _gIframes+1
;
; if( gIframes > 0 )
;
L10D2:	lda     _gIframes
	ora     _gIframes+1
	beq     L10D5
;
; --gIframes;
;
	lda     _gIframes
	sec
	sbc     #$01
	sta     _gIframes
	bcs     L10D5
	dec     _gIframes+1
;
; }
;
L10D5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; gCounter = 5;
;
	ldx     #$00
	lda     #$05
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; ppudisable();
;
	jsr     _ppudisable
;
; palattes();
;
	jsr     _palattes
;
; vblank();
;
	jsr     _vblank
;
; patterntables();
;
	jsr     _patterntables
;
; PPU_ADDRESS = 0x28; // address of nametable #2
;
	lda     #$28
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Level0Bottom); // uncompresses our data
;
	lda     #<(_Level0Bottom)
	ldx     #>(_Level0Bottom)
	jsr     _UnRLE
;
; vblank();
;
	jsr     _vblank
;
; setup_sprites();
;
	jsr     _setup_sprites
;
; apuinit();
;
	jsr     _apuinit
;
; pMusicInit(0x1);
;
	lda     #$01
	jsr     _pMusicInit
;
; gCounter = 5;
;
	ldx     #$00
	lda     #$05
	sta     _gCounter
	stx     _gCounter+1
;
; vblank_counter();
;
	jsr     _vblank_counter
;
; gStage = 0;
;
	lda     #$00
	sta     _gStage
	sta     _gStage+1
;
; fade_in();
;
	jsr     _fade_in
;
; vblank();
;
L10F5:	jsr     _vblank
;
; input_poll();
;
	jsr     _input_poll
;
; update_sprites();
;
	jsr     _update_sprites
;
; dma_sprites();
;
	jsr     _dma_sprites
;
; PPU_CTRL = 0x84 + gYNametable;
;
	lda     _gYNametable
	clc
	adc     #$84
	sta     $2000
;
; set_scroll();
;
	jsr     _set_scroll
;
; do_physics();
;
	jsr     _do_physics
;
; while(1)
;
	jmp     L10F5

.endproc

